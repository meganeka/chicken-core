
Note: at toplevel:
  (specialization-tests.scm:3) in procedure call to `scheme#string?', the predicate is called with an argument of type `string' and will always return true

Note: at toplevel:
  (specialization-tests.scm:3) expected a value of type boolean in conditional, but was given a value of type `true' which is always true:

(if (scheme#string? a) 'ok 'no)

Note: at toplevel:
  (specialization-tests.scm:4) in procedure call to `scheme#string?', the predicate is called with an argument of type `symbol' and will always return false

Note: at toplevel:
  (specialization-tests.scm:4) in conditional, test expression will always return false:

(if (scheme#string? a) 'ok 'no)

Note: at toplevel:
  (specialization-tests.scm:9) in procedure call to `scheme#output-port?', the predicate is called with an argument of type `input-port' and will always return false

Note: at toplevel:
  (specialization-tests.scm:9) in conditional, test expression will always return false:

(if (scheme#output-port? p)
  (let ((t12 ...)) (if (scheme#output-port? p) 'ok 'no))
  (##core#undefined))
